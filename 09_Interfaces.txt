Internal vs public:
 - Internal - Access only in the scope of the project
 - public - from evrywhere also external project


Interface :

 - Abstract Class that all its properties and methods are also abstract
 - pure abstract
 - Only Signitures
 - No Constractors
 - No Fields
 - No Implemetation
 - Declared without permmision (most of the time public)
 - Child class Must Implement all signitures
 - Class Can Implement Many Interfaces But Derived only 1 Class
 -----------------------------------------------

Example:

interface IAnimal 
{
  void animalSound(); // interface method (does not have a body)
}
interface ILog 
{
  void Log();
}

class Dog : Animal IAnimal,ILog
{

  public void animalSound()
  {
    Console.Writline("HAV HAV...");
  }

   public void Log()
  {
    Console.Writline("Logging...");
  }
}

--------------------------------------------------------------------------
interface IPoint
{
    // Property signatures:
    int X { get; set; }

    int Y { get; set; }

    double Distance { get; }
}

class Point : IPoint
{
    // Constructor:
    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }

    // Property implementation:
    public int X { get; set; }

    public int Y { get; set; }

    // Property implementation
    public double Distance =>
       Math.Sqrt(X * X + Y * Y);
}

class MainClass
{
    static void PrintPoint(IPoint p)
    {
        Console.WriteLine("x={0}, y={1}", p.X, p.Y);
    }

    static void Main()
    {
        IPoint p = new Point(2, 3);
        Console.Write("My Point: ");
        PrintPoint(p);
    }
}
// Output: My Point: x=2, y=3

--------------------------------------------------------------------------------------------
